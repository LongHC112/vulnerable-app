pipeline {
    agent any

    environment {
        ZAP_DOCKER_IMAGE = 'ictu/zap2docker-weekly'
        TARGET_URL = 'http://192.168.23.156:6060/login'
        CONTEXT_FILE = 'Dast_Auth.context'
        AUTH_SCRIPT = 'Long'
        REPORT_FILE = 'authen_report.html'
    }

    stages {
        stage('Build Jobs') {
            steps {
                script {
                    sh "ping 192.168.23.135"
                    // Start the vulnerable application in the background using nohup
                    sh "nohup java -jar vulnapp-0.0.1-SNAPSHOT.jar --server.port=6060 &"

                    // Wait for the application to start
                    sh "sleep 30s"

                    // Check if the application is running
                    sh "ps -ef | grep 'vulnapp-0.0.1-SNAPSHOT.jar'"
                }
            }
        }

        stage('Initialize Environment') {
            steps {
                script {
                    // Wait additional time for the application to be fully initialized
                    sh "sleep 30s"
                    
                    // Check if the server is reachable
                    script {
                        def serverReachable = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://192.168.23.135:6060/register", returnStatus: true)
                        if (serverReachable != 200) {
                            error("Server is not reachable at http://192.168.23.135:6060/register")
                        }
                    }

                    // Register a user
                    sh 'curl -X POST "http://192.168.23.135:6060/register" -d "email=Long" -d "password=Long" -d "fullName=Long"'

                    // Pull the ZAP Docker image
                    sh "docker pull ${ZAP_DOCKER_IMAGE}"
                }
            }
        }

        stage('Run ZAP Full Scan') {
            steps {
                script {
                    try {
                        // Run the ZAP full scan in Docker
                        sh """
                        docker run -v /home/kali/Desktop:/zap/wrk/:rw -t ${ZAP_DOCKER_IMAGE} \
                        zap-full-scan.py -t ${TARGET_URL} -r ${REPORT_FILE}
                        """
                    } catch (Exception e) {
                        // Handle exceptions
                        echo "ZAP scan failed: ${e.message}"
                    }
                }
            }
        }

        stage('Find Path') {
            steps {
                script {
                    // Print the current working directory
                    sh "pwd"
                }
            }
        }

        stage('Archive ZAP Report') {
            steps {
                script {
                    // Archive the ZAP report in Jenkins
                    archiveArtifacts artifacts: "${REPORT_FILE}", allowEmptyArchive: true
                }
            }
        }
    }

    post {
        always {
            // Clean up actions, such as removing temporary files
            cleanWs()
        }
    }
}
